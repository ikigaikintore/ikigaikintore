name: Manual Release Backend

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  create-tag-backend:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      latest_tag: ${{steps.set-tag.outputs.LATEST_TAG}}
      new_version: ${{steps.create-version.outputs.NEW_VERSION}}

    defaults:
      run:
        working-directory: ./backend

    env:
      APP_NAME: ikigai.app

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: set-tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: create-version
        if: steps.set-tag.outputs.latest_tag != ''
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
           ;;
          minor)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
           ;;
          patch)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
           ;;
          *)
           echo "Invalid release type specified."
           exit 1
           ;;
          esac
          echo "NEW_VERSION=${version}" >> $GITHUB_OUTPUT

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          cache-dependency-path: './backend/go.sum'
          go-version-file: './backend/go.mod'

      - name: Tests
        run: |
          make tests

      - name: Compile
        if: steps.create-version.outputs.new_version != ''
        run: |
          make compile

      - run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"

      - name: Create Tag
        run: |
          git tag -a "${{ steps.create-version.outputs.new_version }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ steps.create-version.outputs.new_version }}"

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
          token_format: 'access_token'

      - name: Setup docker
        run: |
          gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet

      - name: Build docker image
        run: |
          mv tmp/${{ env.APP_NAME }}* .
          docker build \
            --target app-deploy \
            -t ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }} \
            .

      - name: Push image
        run: |
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          metadata: ${{ secrets.BACKEND_METADATA }}

      - name: Rollback
        if: failure()
        run: |
          git push origin --delete ${{ steps.create-version.outputs.new_version }}
          git tag -d ${{ steps.create-version.outputs.new_version }}
          gcloud artifacts docker images delete ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }}

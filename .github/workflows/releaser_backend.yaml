name: Manual Release Backend

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  create-tag-backend:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      latest_tag: ${{steps.set-tag.outputs.LATEST_TAG}}
      new_version: ${{steps.create-version.outputs.NEW_VERSION}}

    defaults:
      run:
        working-directory: ./backend

    env:
      APP_NAME: ikigai.app
      SERVICE_NAME: ikigai

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: set-tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | grep ${{ secrets.BACKEND_SERVICE_NAME }} | head -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: create-version
        if: steps.set-tag.outputs.latest_tag != ''
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
           ;;
          minor)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
           ;;
          patch)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
           ;;
          *)
           echo "Invalid release type specified."
           exit 1
           ;;
          esac
          echo "NEW_VERSION=${version}" >> $GITHUB_OUTPUT

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          cache-dependency-path: './backend/go.sum'
          go-version-file: './backend/go.mod'

      - name: Tests
        run: |
          make tests

      - run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"

      - name: Create Tag
        run: |
          git tag -a "${{ secrets.BACKEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ secrets.BACKEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}"

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TERF_CREDENTIALS }}
          token_format: 'access_token'

      - name: Setup docker
        run: |
          gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet

      - name: Compile
        run: |
          make compile

      - name: Build docker image
        run: |
          docker build \
            --target app-deploy \
            -t ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }} \
            .

      - name: Push image
        run: |
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }}

      - name: Deploy to Cloud Run
        timeout-minutes: 19
        env:
          REGION: ${{ secrets.REGION }}
          SERVICE_ACCOUNT_EMAIL: ${{ secrets.BACKEND_SERVICE_ACCOUNT }}
          IMAGE: "${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }}"
        run: |
          envsubst < cloud/service.yaml.tpl > cloud/service.yaml
          gcloud run services replace cloud/service.yaml

      #- name: Rollback
      #  if: failure() || cancelled()
      #  run: |
      #    git push origin --delete ${{ secrets.BACKEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}
      #    git tag -d ${{ secrets.BACKEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}
      #    gcloud artifacts docker images delete ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/ikigai/${{ env.APP_NAME }}:${{ steps.create-version.outputs.new_version }}
      #
      #    revisions=$(gcloud run revisions list --service ${{ env.SERVICE_NAME }} --region ${{ secrets.REGION }} --format="value(REVISION)")
#
      #    # Count the number of revisions
      #    num_revisions=$(echo "${revisions}" | wc -l)
#
      #    # If there is only one revision, delete it
      #    if [ "$num_revisions" -eq 1 ]; then
      #        revision_to_delete=$(echo "${revisions}")
      #        gcloud run revisions delete "${revision_to_delete}" --service ${{ env.SERVICE_NAME }} --region ${{ secrets.REGION }} --quiet
      #        echo "Deleted the only revision: ${revision_to_delete}"
      #    else
      #        # If there are multiple revisions, get the next successful deployed service
      #        next_successful_revision=$(echo "$revisions" | grep -m 1 "yes" | awk '{print $1}')
      #        echo "Next successful revision: ${next_successful_revision}"
      #        gcloud run services update-traffic ${{ env.SERVICE_NAME }} --to-revisions ${next_successful_revision}=100
      #    fi
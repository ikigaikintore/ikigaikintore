name: Libs releaser

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      library:
        description: 'Select the library to release'
        type: choice
        required: true
        options:
          - 'cors'
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  create-tag-libs:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    env:
      FOLDER: libs
      DIR_EXISTS: 'false'

    outputs:
      latest_tag: ${{steps.set-tag.outputs.LATEST_TAG}}
      new_version: ${{steps.create-version.outputs.NEW_VERSION}}

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if directory exists
        run: echo "DIR_EXISTS=$(if [ -d '${{ env.FOLDER }}/${{ github.event.inputs.library }}' ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV

      - run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"

      - name: Get latest tag
        id: set-tag
        if: env.DIR_EXISTS == 'true'
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | grep "${{ github.event.inputs.library }}/v" | head -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: create-version
        if: steps.set-tag.outputs.latest_tag != ''
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
            version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
            ;;
          minor)
            version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
            ;;
          patch)
            version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
            ;;
          esac
          echo "NEW_VERSION=${version}" >> $GITHUB_OUTPUT

      - name: Create tag
        # in this step I want to dispatch the tag assignation to the library
        # for example, if the library is cors, then the env FOLDER is libs/cors
        # and from there i will create the tag and push it
        # i have to check with a ls command or something else and if it fails, the process fail
        id: dispatch-tag
        if: env.DIR_EXISTS == 'true'
        run: |
          git tag -a "${{ github.event.inputs.library }}/${{ steps.create-version.outputs.new_version }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ github.event.inputs.library }}/${{ steps.create-version.outputs.new_version }}"

      - name: Fail if no files found
        if: env.DIR_EXISTS == 'false'
        run: |
          echo "No files found in ${{ env.FOLDER }}/${{ github.event.inputs.library }}"
          exit 1

      - name: Rollback
        if: failure() || cancelled()
        run: |
          git tag -d "${{ github.event.inputs.library }}/${{ steps.create-version.outputs.new_version }}"
          git push --delete origin "${{ github.event.inputs.library }}/${{ steps.create-version.outputs.new_version }}"

  end:
    runs-on: ubuntu-latest
    needs: create-tag-libs
    steps:
      - name: Notify
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "Tag created successfully"
          else
            echo "Tag creation failed"
          fi
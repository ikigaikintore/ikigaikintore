name: Manual Release Frontend

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  create-tag-frontend:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      latest_tag: ${{steps.set-tag.outputs.LATEST_TAG}}
      new_version: ${{steps.create-version.outputs.NEW_VERSION}}

    defaults:
      run:
        working-directory: ./frontend

    env:
      APP_NAME: ikigai.front

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: set-tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | grep ${{ secrets.FRONTEND_SERVICE_NAME }}-v | head -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: create-version
        if: steps.set-tag.outputs.latest_tag != ''
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
           ;;
          minor)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
           ;;
          patch)
           version=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
           ;;
          *)
           echo "Invalid release type specified."
           exit 1
           ;;
          esac
          echo "NEW_VERSION=${version}" >> $GITHUB_OUTPUT

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Tests
        run: |
          npm ci
          npm run test

      - run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"

      - name: Create Tag
        run: |
          git tag -a "${{ secrets.FRONTEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ secrets.FRONTEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}"

      #- name: Build
      #  env:
      #    BASE_ENDPOINT: ${{ secrets.BASE_ENDPOINT }}
      #    NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      #    NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      #    NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      #    NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      #    NEXT_PUBLIC_FIREBASE_MESSAGE_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGE_SENDER_ID }}
      #    NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
      #    NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.NEXT_PUBLIC_ENVIRONMENT }}
      #    NEXT_PUBLIC_USER_AUTH: ${{ secrets.NEXT_PUBLIC_USER_AUTH }}
      #  run: |
      #    npm run build

      - uses: FirebaseExtended/action-hosting-deploy@v0
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
          BASE_ENDPOINT: ${{ secrets.BASE_ENDPOINT }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGE_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGE_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.NEXT_PUBLIC_ENVIRONMENT }}
          NEXT_PUBLIC_USER_AUTH: ${{ secrets.NEXT_PUBLIC_USER_AUTH }}
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GIG_JAPAN_398904 }}'
          projectId: ${{ secrets.PROJECT_ID }}
          entrypoint: './frontend'
          channelId: live

      - name: Rollback
        if: failure()
        run: |
          git push origin --delete ${{ secrets.FRONTEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}
          git tag -d ${{ secrets.FRONTEND_SERVICE_NAME }}-${{ steps.create-version.outputs.new_version }}

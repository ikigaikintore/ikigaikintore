// Package weather provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package weather

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for GetData25ForecastHourlyParamsMode.
const (
	Json GetData25ForecastHourlyParamsMode = "json"
	Xml  GetData25ForecastHourlyParamsMode = "xml"
)

// CloudProperties defines model for CloudProperties.
type CloudProperties struct {
	// All Cloudiness percentage (0-100)
	All *int `json:"all,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Cod Code error
	Cod        float32   `json:"cod"`
	Message    string    `json:"message"`
	Parameters *[]string `json:"parameters,omitempty"`
}

// MainProperties defines model for MainProperties.
type MainProperties struct {
	// FeelsLike Perceived temperature in Kelvin
	FeelsLike *float32 `json:"feels_like,omitempty"`

	// GrndLevel Ground level pressure in hPa
	GrndLevel *int `json:"grnd_level,omitempty"`

	// Humidity Relative humidity (%)
	Humidity *int `json:"humidity,omitempty"`

	// Pressure Atmospheric pressure in hPa
	Pressure *int `json:"pressure,omitempty"`

	// SeaLevel Sea level pressure in hPa
	SeaLevel *int `json:"sea_level,omitempty"`

	// Temp Temperature in Kelvin
	Temp *float32 `json:"temp,omitempty"`

	// TempKf Temperature difference between maximum and minimum in Kelvin
	TempKf *float32 `json:"temp_kf,omitempty"`

	// TempMax Maximum temperature in Kelvin
	TempMax *float32 `json:"temp_max,omitempty"`

	// TempMin Minimum temperature in Kelvin
	TempMin *float32 `json:"temp_min,omitempty"`
}

// SysProperties defines model for SysProperties.
type SysProperties struct {
	// Pod Day or night ('d' or 'n')
	Pod *string `json:"pod,omitempty"`
}

// WeatherDescription defines model for WeatherDescription.
type WeatherDescription struct {
	// Description Weather condition description
	Description *string `json:"description,omitempty"`

	// Icon Weather condition icon code
	Icon *string `json:"icon,omitempty"`

	// Id Weather condition ID
	Id *int `json:"id,omitempty"`

	// Main Group of weather conditions (e.g., Rain, Clouds)
	Main *string `json:"main,omitempty"`
}

// WindProperties defines model for WindProperties.
type WindProperties struct {
	// Deg Wind direction in degrees (0Â° is north)
	Deg *int `json:"deg,omitempty"`

	// Gust Wind gust speed in meters per second
	Gust *float32 `json:"gust,omitempty"`

	// Speed Wind speed in meters per second
	Speed *float32 `json:"speed,omitempty"`
}

// GetData25ForecastHourlyParams defines parameters for GetData25ForecastHourly.
type GetData25ForecastHourlyParams struct {
	// Lat Latitude of the location
	Lat float64 `form:"lat" json:"lat"`

	// Lon Longitude of the location
	Lon float64 `form:"lon" json:"lon"`

	// Appid OpenWeatherMap API key
	Appid string `form:"appid" json:"appid"`

	// Mode Response format (optional)
	Mode *GetData25ForecastHourlyParamsMode `form:"mode,omitempty" json:"mode,omitempty"`

	// Cnt Number of forecast hours to return (max 96)
	Cnt *int `form:"cnt,omitempty" json:"cnt,omitempty"`

	// Lang Language code for response text (omit in documentation)
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`
}

// GetData25ForecastHourlyParamsMode defines parameters for GetData25ForecastHourly.
type GetData25ForecastHourlyParamsMode string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetData25ForecastHourly request
	GetData25ForecastHourly(ctx context.Context, params *GetData25ForecastHourlyParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetData25ForecastHourly(ctx context.Context, params *GetData25ForecastHourlyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetData25ForecastHourlyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetData25ForecastHourlyRequest generates requests for GetData25ForecastHourly
func NewGetData25ForecastHourlyRequest(server string, params *GetData25ForecastHourlyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/data/2.5/forecast/hourly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lon", runtime.ParamLocationQuery, params.Lon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appid", runtime.ParamLocationQuery, params.Appid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cnt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cnt", runtime.ParamLocationQuery, *params.Cnt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lang != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lang", runtime.ParamLocationQuery, *params.Lang); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetData25ForecastHourlyWithResponse request
	GetData25ForecastHourlyWithResponse(ctx context.Context, params *GetData25ForecastHourlyParams, reqEditors ...RequestEditorFn) (*GetData25ForecastHourlyResponse, error)
}

type GetData25ForecastHourlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Clouds *CloudProperties `json:"clouds,omitempty"`

		// Dt Unix timestamp representing the time of the forecast
		Dt *int `json:"dt,omitempty"`

		// DtTxt Date and time of the forecast in ISO 8601 format
		DtTxt *time.Time      `json:"dt_txt,omitempty"`
		Main  *MainProperties `json:"main,omitempty"`

		// Pop Probability of precipitation (0-1)
		Pop *float32 `json:"pop,omitempty"`

		// Rain Rain volume for last hour (mm) (present only for last hour)
		Rain *struct {
			N1h *float32 `json:"1h,omitempty"`
		} `json:"rain,omitempty"`
		Sys *SysProperties `json:"sys,omitempty"`

		// Visibility Average visibility in meters
		Visibility *int                  `json:"visibility,omitempty"`
		Weather    *[]WeatherDescription `json:"weather,omitempty"`
		Wind       *WindProperties       `json:"wind,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON404 *ErrorResponse
	JSON429 *ErrorResponse
	JSON5XX *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetData25ForecastHourlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetData25ForecastHourlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetData25ForecastHourlyWithResponse request returning *GetData25ForecastHourlyResponse
func (c *ClientWithResponses) GetData25ForecastHourlyWithResponse(ctx context.Context, params *GetData25ForecastHourlyParams, reqEditors ...RequestEditorFn) (*GetData25ForecastHourlyResponse, error) {
	rsp, err := c.GetData25ForecastHourly(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetData25ForecastHourlyResponse(rsp)
}

// ParseGetData25ForecastHourlyResponse parses an HTTP response from a GetData25ForecastHourlyWithResponse call
func ParseGetData25ForecastHourlyResponse(rsp *http.Response) (*GetData25ForecastHourlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetData25ForecastHourlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Clouds *CloudProperties `json:"clouds,omitempty"`

			// Dt Unix timestamp representing the time of the forecast
			Dt *int `json:"dt,omitempty"`

			// DtTxt Date and time of the forecast in ISO 8601 format
			DtTxt *time.Time      `json:"dt_txt,omitempty"`
			Main  *MainProperties `json:"main,omitempty"`

			// Pop Probability of precipitation (0-1)
			Pop *float32 `json:"pop,omitempty"`

			// Rain Rain volume for last hour (mm) (present only for last hour)
			Rain *struct {
				N1h *float32 `json:"1h,omitempty"`
			} `json:"rain,omitempty"`
			Sys *SysProperties `json:"sys,omitempty"`

			// Visibility Average visibility in meters
			Visibility *int                  `json:"visibility,omitempty"`
			Weather    *[]WeatherDescription `json:"weather,omitempty"`
			Wind       *WindProperties       `json:"wind,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}
